*****************GIT********************
----------------------------------------:-

it is a tool and git full form global information tracker is used to store the source code.

version control system (or) source code management


GIT STAGES:
-----
working directory : where you write source code and not track that code

staging area :it is rough draft space using by git add command it means save

repository : it is git folder
by doing th git commit you can save the data on that.

types of repository:

local repo: local computer  .git direcotry 

remote repo : git repo which write on the internet

workflow:source code -> git add -> git commit-> git push or git pull to git -> git fork


yum:package manager

yum install git -y

git init: intilize the empty .git repo
git status : to see the  status of the file
red: untracked mode
green: tracked mode
git add file name: it is used to staging area
git commit -m "this is comment to show"   : to save the file into the repo

git log : it  will gives  the commit history

git log --oneline : to see commits on single line
git log -2 --onleline : to show last commits and in one line

TO CONFIGURE THE USERNAME & EMAIL:

git config user.name "prasad"
git config user.email "prasad@gmail.com"

NOTE: old commits will not change it will remain same on tha log

git ignore: to ignore some specific files it will not track and commits your files but it will keep them on your folder


NOTE: .gitignore (. is mandatory here)

vim .gitignore 

files* ( here give the files name which you need to ignore files)

git restore : to move back from tracking to untracking

git restore --staged prasad



BRANCHING:-
----

git branch : the default branch of git is master


git branch branch name : create the new branch

git branch : to list the branches on git account


git checkout movies : to switch the branches

how you know which branch you now? using green colour when you check the branch list that one is current branch


git checkout- b brnach name : to create and switch parllely

git merge : to combine branches

master: the defalut brnach of the git

rebase: it combine the branches but it show only the which branch it will merge


git remote add origin : connection between local to remote repo

git push  origin master 


settings -> devloper setting -> personal -> token -> select expiration 

NOTE: ACCESS TOKEN  is visible once only


git push origin brnach name

git branch -d brnach name : to delete the barnch


git branch -D name


git pull origin brnachname : it will pull the brnach from remote to local

git revert  brnach name : to  undo the changes from the spacific at in brnach level

restore : to move file to tracked to untracked


git branch - m branchname renamebranch : to rename the branch



master branch : where we have put the all code for the application then it is called master branch


git fetch : used to show the diffrence between local and repo

git pull : used to get the changes and show the data in the local

git push : used to push the files from local to remote


git stash: used to hide the files which are commited , which are not commited?  
ans?: we need to stash the files which are not commited only . we stashed becuse we need to saved that file temperarly

git stash filename

git stash pop : it will get the last stash file only

git stash clear : it will remove all stashed files

NOte: git logs are branch independent


git cherry-pick commit-id -of the particular log commit id : it will pick  the specific logs of at branch them.

example: 
if in branch1 one we have files like apple bannana carrot duck and brach two we have eat food diet 

in the above case we need to merge branch1 merge into the branch2 with branch one specific file bananaa then you can use the cherry-pick command.

